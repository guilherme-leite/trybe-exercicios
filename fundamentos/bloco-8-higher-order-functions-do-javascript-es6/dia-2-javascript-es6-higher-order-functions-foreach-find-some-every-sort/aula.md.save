Import√¢ncia das HOFs
"Mas por que isso √© importante?!" Voc√™ deve estar se perguntando. Al√©m de event listeners , JavaScript possui v√°rias outras fun√ß√µes desse tipo. Os arrays, em particular, possuem v√°rias fun√ß√µes que facilitam sua cria√ß√£o e manipula√ß√£o, al√©m de deixar seu c√≥digo muito mais leg√≠vel e conciso.
Por exemplo: imagine que voc√™ tem um array de objetos. Cada objeto √© um estudante com seu nome, nota e situa√ß√£o no curso. Para ser aprovado, ele precisa obter uma nota acima de 60. Como voc√™ pode ver, o objeto abaixo est√° desatualizado e precisa ser atualizado: ele n√£o cont√©m a informa√ß√£o acerca da aprova√ß√£o. Para atualiz√°-lo, voc√™ provavelmente escreveria algo assim, utilizando loops :
Copiar
const students = [
  { name: 'Maria', grade: 70, approved: '' },
  { name: 'Jos√©', grade: 56, approved: '' },
  { name: 'Roberto', grade: 90, approved: '' },
  { name: 'Ana', grade: 81, approved: '' },
];

function verifyGrades() {
  for (let i = 0; i < students.length; i += 1) {
    const student = students[i];
    if (student.grade >= 60) {
      student.approved = 'Aprovado';
    } else {
      student.approved = 'Recupera√ß√£o';
    }
  }
}

verifyGrades();

console.log(students);
// [
//   { name: 'Maria', grade: 70, approved: 'Aprovado' },
//   { name: 'Jos√©', grade: 56, approved: 'Recupera√ß√£o' },
//   { name: 'Roberto', grade: 90, approved: 'Aprovado' },
//   { name: 'Ana', grade: 81, approved: 'Aprovado' }
// ]
Usando forEach , √© assim que voc√™ faria a mesma coisa:
Copiar
const students = [
  { name: 'Maria', grade: 70, approved: '' },
  { name: 'Jos√©', grade: 56, approved: '' },
  { name: 'Roberto', grade: 90, approved: '' },
  { name: 'Ana', grade: 81, approved: '' },
];

function verifyGrades() {
  students.forEach((student, index) => {
    if (student.grade >= 60) {
      students[index].approved = 'Aprovado';
    } else {
      students[index].approved = 'Recupera√ß√£o';
    }
  });
}

verifyGrades();

console.log(students);
// [
//   { name: 'Maria', grade: 70, approved: 'Aprovado' },
//   { name: 'Jos√©', grade: 56, approved: 'Recupera√ß√£o' },
//   { name: 'Roberto', grade: 90, approved: 'Aprovado' },
//   { name: 'Ana', grade: 81, approved: 'Aprovado' }
// ]
Ok, as duas abordagens geram o mesmo resultado, mas qual a diferen√ßa? Vamos analisar as duas solu√ß√µes e ver em que elas diferem!
Na solu√ß√£o usando for , voc√™ vai precisar se preocupar mais com os detalhes durante a implementa√ß√£o de sua l√≥gica de execu√ß√£o e menos com a solu√ß√£o do problema que voc√™ deseja solucionar - voc√™ s√≥ quer atualizar uma propriedade de cada estudante, afinal. Voc√™ precisa:
Declarar uma vari√°vel para controlar a itera√ß√£o pelo array;
Inicializar essa vari√°vel com zero, a primeira posi√ß√£o do array;
Controlar o ponto de parada, quando o fim do array foi alcan√ßado ( index < students.length );
Incrementar manualmente a vari√°vel de controle do loop a cada itera√ß√£o ( index += 1 );
Usar indexa√ß√£o de arrays pra acessar cada elemento/estudante ( students[index] );
Ufa! Tudo isso s√≥ pra atualizar o seu array!
Agora vamos olhar para a segunda solu√ß√£o. Tudo o que voc√™ precisa fazer √© chamar a fun√ß√£o forEach no array e passar para ela a fun√ß√£o que voc√™ criou. E mais nada! Esse √© o poder da fun√ß√£o forEach . üòé
Ainda n√£o est√° convencido? Ent√£o vamos a mais um exemplo. Queremos encontrar e imprimir no console o primeiro elemento de um array que satisfa√ßa a uma determinada condi√ß√£o. Pode ser, por exemplo, encontrar o primeiro n√∫mero que seja divis√≠vel por 5 em uma lista de n√∫meros.
Primeiro, usando for e if :
Copiar
const numbers = [11, 24, 39, 47, 50, 62, 75, 81, 96, 100];
let firstMultipleOf5;
for (let index = 0; index < numbers.length; index += 1) {
  if (numbers[index] % 5 === 0) {
    firstMultipleOf5 = numbers[index];
    break;
  }
}

console.log(firstMultipleOf5);
// 50
Agora, a mesma coisa usando Array.find :
Copiar
const numbers = [11, 24, 39, 47, 50, 62, 75, 81, 96, 100];
const firstMultipleOf5 = numbers.find((number) => number % 5 === 0);

console.log(firstMultipleOf5);
// 50
Al√©m de muito mais concisa, a solu√ß√£o usando find √© muito mais f√°cil de entender, concorda?
Ponto de observa√ß√£o: note que o par√¢metro passado para numbers.find(), number => number % 5 == 0 , √© uma arrow function, igual no primeiro exemplo de forEach, em que foi passada a fun√ß√£o verifyGrade .
Mas essa ideia de passar uma arrow function para uma fun√ß√£o ainda est√° pouco clara, n√£o √© mesmo? E esse par√¢metro que ela recebe, vem de onde?! Quem passa? Agora vamos ver, em detalhes, a estrutura de uma HOF .

Estrutura das HOFs em Arrays
As Higher Order Functions que veremos hoje s√£o parecidas entre si: elas mudam em alguns pontos espec√≠ficos, mas todas possuem a mesma estrutura. Para demonstrar, olhe o exemplo de uma HOF que imprime na tela cada valor do array:
Copiar
const arrayOfValues = ['jos√©', 50, 0.25, { comida: 'Chocolate' }];
arrayOfValues.forEach((element) => {
  console.log('Cada elemento do array:', element);
});

// Cada elemento do array: jos√©
// Cada elemento do array: 50
// Cada elemento do array: 0.25
// Cada elemento do array: { comida: 'Chocolate' }
Sua estrutura:
Copiar
arrayOfValues.forEach((element) => {
  console.log('Cada elemento do array:', element);
});
Suas partes:
arrayOfValues - Nome do array que ser√° percorrido;
.forEach - A HOF , pode ser, .find , .some , .every ;
element - Valor do elemento do array;
(element) => {console.log('Cada elemento do array:', element); - fun√ß√£o a ser executada, pode ser passada igual ao terceiro exemplo do conte√∫do com a fun√ß√£o verifyGrade .
√â isso mesmo! Quando voc√™ passa uma arrow function para uma HOF , o primeiro par√¢metro que essa arrow function recebe √© o elemento do array. Em portugu√™s, √© como se:
Copiar
meuArray.forEach((elemento) => {
  if (elemento % 2 === 0) {
    console.log(`${elemento} √© div√≠sivel por 2!`);
  }
});
Significasse Verifique se cada elemento do meu array √© m√∫ltiplo de 2 .
Uma fun√ß√£o como meuArray.find(elemento => elemento % 5 === 0) , por outro lado, seria Encontre o primeiro elemento de meuArray que √© m√∫ltiplo de cinco .
Ficou mais claro agora? A pr√≥pria Higher Order Function se encarrega da l√≥gica de pegar cada elemento do array e passar como par√¢metro para a arrow function . Com for voc√™ faria isso manualmente, a proposta aqui √© a HOF fazer pra voc√™! Sua √∫nica preocupa√ß√£o deve ser "O que eu quero fazer com cada elemento do array?", e n√£o "Como eu acesso cada elemento do array?".
Observe abaixo que podemos passar mais de um par√¢metro para a fun√ß√£o tamb√©m. As HOFs disponibilizam para voc√™, caso precisar, acesso a mais informa√ß√µes do array:
Copiar
const arrayOfValues = ['jos√©', 50, 0.25, { comida: 'Chocolate' }];
arrayOfValues.forEach((element, indexOfTheArray, theEntireArray) => {
  console.log('Cada elemento do array:', element);
  console.log('Index, posi√ß√£o do elemento:', indexOfTheArray);
  console.log('Array percorrido:', theEntireArray);
});

// => ---------------
//   Cada elemento do array: jos√©
//   Index, posi√ß√£o do elemento: 0
//   Array percorrido: [ 'jos√©', 50, 0.25, { comida: 'Chocolate' } ]
//   ---------------
//   Cada elemento do array: 50
//   Index, posi√ß√£o do elemento: 1
//   Array percorrido: [ 'jos√©', 50, 0.25, { comida: 'Chocolate' } ]
//   ---------------
//   Cada elemento do array: 0.25
//   Index, posi√ß√£o do elemento: 2
//   Array percorrido: [ 'jos√©', 50, 0.25, { comida: 'Chocolate' } ]
//   ---------------
//   Cada elemento do array: { comida: 'Chocolate' }
//   Index, posi√ß√£o do elemento: 3
//   Array percorrido: [ 'jos√©', 50, 0.25, { comida: 'Chocolate' } ]
A arrow function passada para o forEach possui element , index e array como par√¢metros, onde:
element - Valor do elemento do array;
index - √çndice em cada itera√ß√£o ou posi√ß√£o do elemento no array, come√ßando do 0;
array - Array original que est√° sendo percorrido.
Agora que j√° aprendeu sobre a estrutura, vamos nos aprofundar em cada uma das HOF .

Array.forEach
Como foi visto nos exemplos anteriores, o forEach percorre o array e executa a fun√ß√£o passada para cada um dos seus valores. O forEach n√£o retorna nenhum valor .
Assista a seguir o v√≠deo em que o nosso querido Cairo explica como o m√©todo forEach funciona.

Agora vamos usar o forEach , para realizar a tabuada do 2. Veja o exemplo abaixo:
Copiar
const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

const multipliesFor2 = (element) => {
  console.log(`${element} * 2: ${element * 2}`);
};

numbers.forEach(multipliesFor2);
No exemplo acima, foi executado para cada elemento do array a fun√ß√£o multipliesFor2 , que imprime o par√¢metro element * 2 no console.
Agora estamos tratando de uma HOF , sendo assim √© poss√≠vel se utilizar tamb√©m dos demais par√¢metros para se resolver um problema. Como se pode fazer isso? Veja este exemplo abaixo com o uso de index no forEach :
Copiar
const names = ['Bianca', 'Camila', 'Fernando', 'Ana Roberta'];

const convertToUpperCase = (name, index) => {
  names[index] = name.toUpperCase();
};

names.forEach(convertToUpperCase);
console.log(names); // [ 'BIANCA', 'CAMILA', 'FERNANDO', 'ANA ROBERTA' ]
N√£o se esque√ßa, tamb√©m, de rodar todos os exemplos no console do seu navegador ou na sua m√°quina! Isso ajuda muito a fixar as coisas. Brinque e experimente com as fun√ß√µes!
Para fixar
1 - Use o m√©todo forEach chamando a callback showEmailList para apresentar os emails
Copiar
const emailListInData = [
  'roberta@email.com',
  'paulo@email.com',
  'anaroberta@email.com',
  'fabiano@email.com',
];

const showEmailList = (email) => {
  console.log(`O email ${email} esta cadastrado em nosso banco de dados!`);
};

// Adicione seu c√≥digo aqui
2 - Leia e entenda este exemplo do forEach feito no CodePen.

Array.find
A fun√ß√£o find √© utilizada para achar o primeiro elemento que satisfa√ßa a condi√ß√£o passada. Ent√£o, a fun√ß√£o que dever√° ser passada precisa retornar true ou false. Nesta p√°gina do MDN voc√™ pode ver com mais detalhes sobre o find . Leia at√© a se√ß√£o Exemplos .
A anima√ß√£o abaixo nos mostra como o find pode ser utilizado para encontrar o primeiro item do array listaNumeros maior do que vinte. Essa condi√ß√£o (item > 20) √© implementada na fun√ß√£o (callback), que ser√° executada para cada elemento de listaNumeros . Quando o primeiro item do array listaNumeros for maior que vinte, a fun√ß√£o (callback) retornar√° true e o find ir√° retornar este elemento que satisfaz a condi√ß√£o passada. Observe que o retorno do m√©todo find √© um √∫nico elemento: o primeiro item de listaNUmeros maior do que 20.

GIF ilustrando o m√©todo .find()
Olhe o exemplo abaixo:
Copiar
const numbers = [19, 21, 30, 3, 45, 22, 15];

const verifyEven = (number) => number % 2 === 0;

const isEven = numbers.find(verifyEven);

console.log(isEven); // 30

console.log(verifyEven(9)); // False
console.log(verifyEven(14)); // True

// Outra forma de ser realizada sem a necessidade de criar uma nova fun√ß√£o.
const isEven2 = numbers.find((number) => number % 2 === 0);

console.log(isEven2); // 30
Esse exemplo mostra duas formas de resolver o mesmo problema, que √© retornar o primeiro n√∫mero par do array.
Primeiro observe a fun√ß√£o verifyEven . Ela verifica se o n√∫mero recebido √© par. Se sim, seu retorno ser√° true; caso contr√°rio, seu retorno √© false.
Quando a passamos como callback , o find executar√° a fun√ß√£o para cada um dos elementos do array e retornar√° o primeiro elemento quando o retorno da fun√ß√£o for true.
Para fixar
1 - Utilize o find para retornar o primeiro n√∫mero do array que √© divis√≠vel por 3 e 5 , caso ele exista:
Copiar
const numbers = [19, 21, 30, 3, 45, 22, 15];

const findDivisibleBy3And5 = () => {
  // Adiciona seu c√≥digo aqui
}

console.log(findDivisibleBy3And5())
2 - Utilize o find para encontrar o primeiro nome com cinco letras, caso ele exista:
Copiar
const names = ['Jo√£o', 'Irene', 'Fernando', 'Maria'];

const findNameWithFiveLetters = () => {
  // Adicione seu c√≥digo aqui:
}

console.log(findNameWithFiveLetters());
3 - Utilize o find para encontrar a m√∫sica com id igual a 31031685 , caso ela exista:
Copiar
const musicas = [
  { id: '31031685', title: 'Partita in C moll BWV 997' },
  { id: '31031686', title: 'Toccata and Fugue, BWV 565' },
  { id: '31031687', title: 'Chaconne, Partita No. 2 BWV 1004' },
]

function findMusic(id) {
  // Adicione seu c√≥digo aqui
}

console.log(findMusic('31031685'))

Array.some e Array.every
As fun√ß√µes some e every s√£o parecidas. A primeira retorna true se ao menos um elemento de um array satisfaz a uma condi√ß√£o. A segunda retorna true se todos os elementos de um array satisfazem a uma condi√ß√£o. O MDN cont√©m explica√ß√µes mais detalhadas sobre essas fun√ß√µes, al√©m de exemplos. Clique aqui e aqui para ler sobre essas fun√ß√µes. Leia at√© a se√ß√£o Exemplos .
Para visualizar melhor o retorno dos m√©todos some e every , brinque com esses dois exemplos no CodePen nos links abaixo. Voc√™ pode alterar os n√∫meros do array numbers para verificar o que a fun√ß√£o est√° retornando para cada caso.
Array.some : link
Array.every : link
O exemplo abaixo usa o some para verificar se possui algum nome que come√ßa com a letra desejada:
Copiar
const listNames = ['Maria', 'Manuela', 'Jorge', 'Ricardo', 'Wilson'];

const verifyFirstLetter = (letter, names) => names.some((name) => name[0] === letter);

console.log(verifyFirstLetter('J', listNames)); // true
console.log(verifyFirstLetter('x', listNames)); // false
O exemplo abaixo usar√° o every para verificar se o estudante passou em todas as mat√©rias:
Copiar
const grades = {
  portugues: 'Aprovado',
  matematica: 'Reprovado',
  ingles: 'Aprovado',
};

const verifyGrades = (studentGrades) => (
  Object.values(studentGrades).every((grade) => grade === 'Aprovado')
);

console.log(verifyGrades(grades));
Observe que foi usado Object.values junto com o every . Como o Object.values retorna um array apenas com os valores do objeto, o every percorrer√° esse array retornado. Interessante essa combina√ß√£o de fun√ß√µes, hein?! Experimente alguma combina√ß√£o dessas na sua pr√≥pria m√°quina agora!
Para fixar
1 - Escreva uma fun√ß√£o que dado um array de nomes e um nome retorne true se ele estiver contido e caso contr√°rio, retorne false , use some ;
Copiar
const names = ['Mateus', 'Jos√©', 'Ana', 'Cl√°udia', 'Bruna'];

const hasName = (arr, name) => {
  //Adicione seu c√≥digo aqui
}

console.log(hasName(names, 'Ana'))
2 - Escreva uma fun√ß√£o que dado um array de pessoas e uma idade m√≠nima retorne true se todas tiverem a idade maior ou igual a m√≠nima e caso contr√°rio false , use every ;
Copiar
const people = [
  { name: 'Mateus', age: 18 },
  { name: 'Jos√©', age: 16 },
  { name: 'Ana', age: 23 },
  { name: 'Cl√°udia', age: 20 },
  { name: 'Bruna', age: 19 },
];

const verifyAges = (arr, minimumAge) => {
  //Adicione seu c√≥digo aqui
}

console.log(verifyAges(people, 18));

Array.sort
Por √∫ltimo, existe a fun√ß√£o sort . Ela permite ordenar um array de acordo com algum crit√©rio estabelecido. Veja este exemplo com um array de strings:
Copiar
const food = ['arroz', 'feij√£o', 'farofa', 'chocolate', 'doce de leite'];
food.sort();
console.log(food);
// [ 'arroz', 'chocolate', 'doce de leite', 'farofa', 'feij√£o' ]
Funcionou bem com um array de strings, n√£o √© mesmo? Por tanto, caso queira ordenar de forma alfab√©tica, basta chamar sort , sem par√¢metros algum na fun√ß√£o. Agora, veja este exemplo com um array de n√∫meros:
Copiar
const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
numbers.sort();
console.log(numbers); // [1, 10, 2, 3, 4, 5, 6, 7, 8, 9]
üòÆ O que aconteceu com esta ordena√ß√£o?
Como pode notar, a forma como ela organiza os elementos do array n√£o √© t√£o intuitiva. Isso ocorre, pois ela distribui sempre por ordem alfab√©tica . No caso, quando h√° elementos como n√∫meros, a sort coloca de acordo com a ordem alfab√©tica dos c√≥digos desse elemento na tabela de caracteres unicode!
Agora, se deseja ordenar de forma num√©rica crescente, √© necess√°rio passar a fun√ß√£o a seguir:
Copiar
const points = [40, 100, 1, 5, 25, 10];
points.sort((a, b) => a - b);
console.log(points); // [1, 5, 10, 25, 40, 100]
A l√≥gica √© a seguinte: a fun√ß√£o recebe, da sort , todos os elementos do array, em pares (elemento1, elemento2) , e vai comparando-os. O formato √© meuArray.sort((elemento1, elemento2) => /* logica da fun√ß√£o */) . Ou seja: para o array [1, 2, 3, 4] , a fun√ß√£o receber√° (2, 1) , (3, 2) , (4, 3) como par√¢metros e ordenar√° o array com base em seu resultado. Se a opera√ß√£o de elemento1 com elemento2 der resultado negativo, elemento1 vai para tr√°s. Caso contr√°rio, vai para frente, para, de forma decrescente, s√≥ inverter elemento1 - elemento2 para elemento2 - elemento1 . Novamente, o artigo do MDN √© uma excelente fonte de informa√ß√£o para entender melhor.
Veja agora se realizarmos uma simples modifica√ß√£o no retorno da fun√ß√£o que ordena os n√∫meros e veja o que acontece:
Copiar
const points = [40, 100, 1, 5, 25, 10];
points.sort((a, b) => b - a);
console.log(points); // [ 100, 40, 25, 10, 5, 1 ]
Para visualizar como o sort funciona, brinque com este exemplo feito no CodePen.
Para fixar
1 - Utilize a sort para ordenar o array pela idade das pessoas em ordem crescente .
Copiar
const people = [
  { name: 'Mateus', age: 18 },
  { name: 'Jos√©', age: 16 },
  { name: 'Ana', age: 23 },
  { name: 'Cl√°udia', age: 20 },
  { name: 'Bruna', age: 19 },
];

// Adicione se c√≥digo aqui

console.log(people);
2 - Modifique o sort do exerc√≠cio anterior para que ordene o array pela idade das pessoas em ordem decrescente .

